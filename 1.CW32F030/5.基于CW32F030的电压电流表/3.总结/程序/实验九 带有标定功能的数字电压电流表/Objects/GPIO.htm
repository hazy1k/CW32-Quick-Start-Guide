<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\GPIO.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\GPIO.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun Mar 02 14:52:58 2025
<BR><P>
<H3>Maximum Stack Usage =        116 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ADC_init &rArr; ADC_SerialChContinuousModeCfg &rArr; ADC_SerialChCommon &rArr; ADC_Sqr0ChannelCfg
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC_IRQHandler</a> from interrupts_cw32f030.o(i.ADC_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[13]">ATIM_IRQHandler</a> from interrupts_cw32f030.o(i.ATIM_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[24]">AWT_IRQHandler</a> from interrupts_cw32f030.o(i.AWT_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[1a]">BTIM1_IRQHandler</a> from main.o(i.BTIM1_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[1b]">BTIM2_IRQHandler</a> from interrupts_cw32f030.o(i.BTIM2_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[1c]">BTIM3_IRQHandler</a> from interrupts_cw32f030.o(i.BTIM3_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[f]">DMACH1_IRQHandler</a> from interrupts_cw32f030.o(i.DMACH1_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[10]">DMACH23_IRQHandler</a> from interrupts_cw32f030.o(i.DMACH23_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[11]">DMACH45_IRQHandler</a> from interrupts_cw32f030.o(i.DMACH45_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[25]">FAULT_IRQHandler</a> from interrupts_cw32f030.o(i.FAULT_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[9]">FLASHRAM_IRQHandler</a> from interrupts_cw32f030.o(i.FLASHRAM_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[b]">GPIOA_IRQHandler</a> from interrupts_cw32f030.o(i.GPIOA_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[c]">GPIOB_IRQHandler</a> from interrupts_cw32f030.o(i.GPIOB_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[d]">GPIOC_IRQHandler</a> from interrupts_cw32f030.o(i.GPIOC_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[e]">GPIOF_IRQHandler</a> from interrupts_cw32f030.o(i.GPIOF_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[16]">GTIM1_IRQHandler</a> from interrupts_cw32f030.o(i.GTIM1_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[17]">GTIM2_IRQHandler</a> from interrupts_cw32f030.o(i.GTIM2_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[18]">GTIM3_IRQHandler</a> from interrupts_cw32f030.o(i.GTIM3_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[19]">GTIM4_IRQHandler</a> from interrupts_cw32f030.o(i.GTIM4_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from interrupts_cw32f030.o(i.HardFault_Handler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[1d]">I2C1_IRQHandler</a> from interrupts_cw32f030.o(i.I2C1_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[1e]">I2C2_IRQHandler</a> from interrupts_cw32f030.o(i.I2C2_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[7]">LVD_IRQHandler</a> from interrupts_cw32f030.o(i.LVD_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from interrupts_cw32f030.o(i.NMI_Handler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from interrupts_cw32f030.o(i.PendSV_Handler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[a]">RCC_IRQHandler</a> from interrupts_cw32f030.o(i.RCC_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from interrupts_cw32f030.o(i.RTC_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_cw32f030.o(.text) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[1f]">SPI1_IRQHandler</a> from interrupts_cw32f030.o(i.SPI1_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[20]">SPI2_IRQHandler</a> from interrupts_cw32f030.o(i.SPI2_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from interrupts_cw32f030.o(i.SVC_Handler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from cw32f030_systick.o(i.SysTick_Handler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_cw32f030.o(i.SystemInit) referenced from startup_cw32f030.o(.text)
 <LI><a href="#[21]">UART1_IRQHandler</a> from interrupts_cw32f030.o(i.UART1_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[22]">UART2_IRQHandler</a> from interrupts_cw32f030.o(i.UART2_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[23]">UART3_IRQHandler</a> from interrupts_cw32f030.o(i.UART3_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[14]">VC1_IRQHandler</a> from interrupts_cw32f030.o(i.VC1_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[15]">VC2_IRQHandler</a> from interrupts_cw32f030.o(i.VC2_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[6]">WDT_IRQHandler</a> from interrupts_cw32f030.o(i.WDT_IRQHandler) referenced from startup_cw32f030.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_cw32f030.o(.text)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[29]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[34]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[73]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[74]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[75]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2b]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[76]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[77]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_cw32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Sysctrl_GetHClkFreq
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySETV
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayI
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Cal
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mean_Value_Filter
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_Enable
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Cal
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Cal
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Cal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeK
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Cal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeK
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Cal
</UL>

<P><STRONG><a name="[7b]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[2e]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[7c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>ADC_BufEnSerialCh</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cw32f030_adc.o(i.ADC_BufEnSerialCh))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr0ChannelCfg
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr03ChannelCfg
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr02ChannelCfg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr01ChannelCfg
</UL>

<P><STRONG><a name="[42]"></a>ADC_ClearITPendingAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cw32f030_adc.o(i.ADC_ClearITPendingAll))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[35]"></a>ADC_Enable</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, cw32f030_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[36]"></a>ADC_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cw32f030_adc.o(i.ADC_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[59]"></a>ADC_GetSqr0Result</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cw32f030_adc.o(i.ADC_GetSqr0Result))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
</UL>

<P><STRONG><a name="[5a]"></a>ADC_GetSqr3Result</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cw32f030_adc.o(i.ADC_GetSqr3Result))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
</UL>

<P><STRONG><a name="[12]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, cw32f030_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[37]"></a>ADC_SerialChCommon</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, cw32f030_adc.o(i.ADC_SerialChCommon))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_SerialChCommon &rArr; ADC_Sqr0ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr0ChannelCfg
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr03ChannelCfg
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr02ChannelCfg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sqr01ChannelCfg
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChContinuousModeCfg
</UL>

<P><STRONG><a name="[3d]"></a>ADC_SerialChContinuousModeCfg</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, cw32f030_adc.o(i.ADC_SerialChContinuousModeCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_SerialChContinuousModeCfg &rArr; ADC_SerialChCommon &rArr; ADC_Sqr0ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[43]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cw32f030_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[3b]"></a>ADC_Sqr01ChannelCfg</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cw32f030_adc.o(i.ADC_Sqr01ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Sqr01ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BufEnSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[3c]"></a>ADC_Sqr02ChannelCfg</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cw32f030_adc.o(i.ADC_Sqr02ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Sqr02ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BufEnSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[39]"></a>ADC_Sqr03ChannelCfg</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, cw32f030_adc.o(i.ADC_Sqr03ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Sqr03ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BufEnSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[3a]"></a>ADC_Sqr0ChannelCfg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cw32f030_adc.o(i.ADC_Sqr0ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Sqr0ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BufEnSerialCh
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChCommon
</UL>

<P><STRONG><a name="[40]"></a>ADC_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cw32f030_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[3f]"></a>ADC_init</STRONG> (Thumb, 132 bytes, Stack size 96 bytes, adc.o(i.ADC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ADC_init &rArr; ADC_SerialChContinuousModeCfg &rArr; ADC_SerialChCommon &rArr; ADC_Sqr0ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SerialChContinuousModeCfg
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearITPendingAll
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13]"></a>ATIM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.ATIM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>AWT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.AWT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>BTIM1_IRQHandler</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, main.o(i.BTIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BTIM1_IRQHandler &rArr; save_calibration &rArr; flash_write &rArr; FLASH_WirteHalfWords
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPin
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_GetITStatus
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ClearITPendingBit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Refresh
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_calibration
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Cal
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mean_Value_Filter
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>BTIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.BTIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>BTIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.BTIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>BTIM_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cw32f030_btim.o(i.BTIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[50]"></a>BTIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cw32f030_btim.o(i.BTIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Btim1_Init
</UL>

<P><STRONG><a name="[44]"></a>BTIM_GetITStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cw32f030_btim.o(i.BTIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>BTIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cw32f030_btim.o(i.BTIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Btim1_Init
</UL>

<P><STRONG><a name="[4e]"></a>BTIM_TimeBaseInit</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, cw32f030_btim.o(i.BTIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BTIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Btim1_Init
</UL>

<P><STRONG><a name="[4d]"></a>Btim1_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, btim1.o(i.Btim1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Btim1_Init &rArr; BTIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_TimeBaseInit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_ITConfig
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>Close_Com</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, seg_dis.o(i.Close_Com))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Close_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Refresh
</UL>

<P><STRONG><a name="[4b]"></a>ComputeK</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, main.o(i.ComputeK))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ComputeK &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[f]"></a>DMACH1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.DMACH1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMACH23_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.DMACH23_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMACH45_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.DMACH45_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>Dis_Refresh</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, seg_dis.o(i.Dis_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Dis_Refresh &rArr; Seg_Dis &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seg_Dis
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_Com
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>Display</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, seg_dis.o(i.Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Display &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBuff
</UL>

<P><STRONG><a name="[56]"></a>DisplayBuff</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, main.o(i.DisplayBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DisplayBuff &rArr; DisplaySETV &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySETV
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayI
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>DisplayI</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, seg_dis.o(i.DisplayI))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DisplayI &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBuff
</UL>

<P><STRONG><a name="[58]"></a>DisplaySETV</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, seg_dis.o(i.DisplaySETV))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DisplaySETV &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBuff
</UL>

<P><STRONG><a name="[25]"></a>FAULT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.FAULT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASHRAM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.FLASHRAM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>FLASH_ErasePages</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, cw32f030_flash.o(i.FLASH_ErasePages))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ErasePages
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[6d]"></a>FLASH_LockAllPages</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cw32f030_flash.o(i.FLASH_LockAllPages))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[62]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cw32f030_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[6b]"></a>FLASH_UnlockPages</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, cw32f030_flash.o(i.FLASH_UnlockPages))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_UnlockPages
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[6f]"></a>FLASH_WirteHalfWords</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, flash.o(i.FLASH_WirteHalfWords))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_WirteHalfWords
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[b]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.GPIOA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.GPIOB_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIOC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.GPIOC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOF_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.GPIOF_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO_Init</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, cw32f030_gpio.o(i.GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seg_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYGPIO_Init
</UL>

<P><STRONG><a name="[48]"></a>GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cw32f030_gpio.o(i.GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cw32f030_gpio.o(i.GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seg_Dis
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_Com
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16]"></a>GTIM1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.GTIM1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>GTIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.GTIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>GTIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.GTIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>GTIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.GTIM4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>Get_ADC_Value</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, adc.o(i.Get_ADC_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_ADC_Value
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetSqr3Result
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetSqr0Result
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.I2C1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.I2C2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>KEYGPIO_Init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(i.KEYGPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEYGPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>LVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.LVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>Mean_Value_Filter</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(i.Mean_Value_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Mean_Value_Filter &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Cal
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>RCC_Configuration</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RCC_Configuration &rArr; RCC_PLL_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SystemCoreClockUpdate
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Switch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_Enable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLKPRS_Config
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSI_Enable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKPRS_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>RCC_HCLKPRS_Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cw32f030_rcc.o(i.RCC_HCLKPRS_Config))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[5e]"></a>RCC_HSI_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cw32f030_rcc.o(i.RCC_HSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[a]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.RCC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>RCC_PCLKPRS_Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cw32f030_rcc.o(i.RCC_PCLKPRS_Config))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[61]"></a>RCC_PLL_Enable</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, cw32f030_rcc.o(i.RCC_PLL_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RCC_PLL_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[63]"></a>RCC_SysClk_Switch</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cw32f030_rcc.o(i.RCC_SysClk_Switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RCC_SysClk_Switch &rArr; RCC_Sysctrl_GetHClkFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[65]"></a>RCC_Sysctrl_GetHClkFreq</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cw32f030_rcc.o(i.RCC_Sysctrl_GetHClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_Sysctrl_GetHClkFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Switch
</UL>

<P><STRONG><a name="[64]"></a>RCC_SystemCoreClockUpdate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cw32f030_rcc.o(i.RCC_SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>Seg_Dis</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, seg_dis.o(i.Seg_Dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Seg_Dis &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Refresh
</UL>

<P><STRONG><a name="[67]"></a>Seg_Init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, seg_dis.o(i.Seg_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Seg_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cw32f030_systick.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, system_cw32f030.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(.text)
</UL>
<P><STRONG><a name="[21]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.UART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.UART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>VC1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.VC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>VC2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.VC2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>Volt_Cal</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, main.o(i.Volt_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Volt_Cal &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mean_Value_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>

<P><STRONG><a name="[6]"></a>WDT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32f030.o(i.WDT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32f030.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cw32f030_i2c.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Sysctrl_GetHClkFreq
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seg_Dis
</UL>

<P><STRONG><a name="[7d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[7e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[7f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[6a]"></a>flash_erase</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, flash.o(i.flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = flash_erase &rArr; FLASH_ErasePages
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UnlockPages
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LockAllPages
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePages
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_calibration
</UL>

<P><STRONG><a name="[71]"></a>flash_read</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, flash.o(i.flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_vol_cur_calibration
</UL>

<P><STRONG><a name="[6e]"></a>flash_write</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, flash.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = flash_write &rArr; FLASH_WirteHalfWords
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UnlockPages
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LockAllPages
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WirteHalfWords
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_calibration
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = main &rArr; ADC_init &rArr; ADC_SerialChContinuousModeCfg &rArr; ADC_SerialChCommon &rArr; ADC_Sqr0ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seg_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Btim1_Init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_vol_cur_calibration
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Cal
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYGPIO_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBuff
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[70]"></a>read_vol_cur_calibration</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main.o(i.read_vol_cur_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = read_vol_cur_calibration &rArr; save_calibration &rArr; flash_write &rArr; FLASH_WirteHalfWords
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_calibration
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>save_calibration</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i.save_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = save_calibration &rArr; flash_write &rArr; FLASH_WirteHalfWords
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_vol_cur_calibration
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIM1_IRQHandler
</UL>
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[2c]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
